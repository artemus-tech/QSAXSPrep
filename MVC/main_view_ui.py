# -*- coding: utf-8 -*-
from IPython.lib.display import Code
# Form implementation generated from reading ui file 'MVC/main_view.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QWizardPage, QVBoxLayout, QLabel, QLineEdit, QGridLayout, QWizard, QCheckBox, QPushButton, \
    QComboBox, QWidget, QTabWidget
import Common.cast as ct
from MPL.CustomNavigationToolbar2QT import CustomNavigationToolbar2QT


class Ui_MainWindow(object):

    def _get_cmb_values(self):
        return [row[1][1] for row in self.scale_list.items()]

    def get_cmb_options_by_index(self, index):
        return list(self.scale_list.keys())[index]

    scale_list = {
        ("linear", "linear"): ("0", "Linear"),
        ("log", "linear"): ("1", "LogX"),
        ("linear", "log"): ("2", "LogY"),
        ("log", "log"): ("3", "Double Log"),
        ("symlog", "linear"): ("4", "SymLogX"),
        ("linear", "symlog"): ("5", "SymLogY"),
        ("symlog", "symlog"): ("6", "Double SemiLog")
    }

    # def __init__(self, saxs_plot_service, saxs_edit_plot_service):
    def __init__(self, mpl_service):
        # dependents
        self.guinier_page_grid_layout = None
        self.guinier_page_scale_cmb = None

        self._mpl_service = mpl_service

        self.plots = self._mpl_service.generate_plots_collection(5)
        self.edit_plots = self._mpl_service.generate_edit_plots_collection(5)

        self.plot1 = self.plots[0][0]
        self.plot2 = self.plots[1][0]
        self.plot3 = self.plots[2][0]
        self.plot4 = self.plots[3][0]

        self.plot1_toolbar = self.plots[0][1]
        self.plot2_toolbar = self.plots[1][1]
        self.plot3_toolbar = self.plots[2][1]
        self.plot4_toolbar = self.plots[3][1]

        self.edit_plot1 = self.edit_plots[0][0]
        self.edit_plot2 = self.edit_plots[1][0]
        self.edit_plot3 = self.edit_plots[2][0]

        self.edit_plot3.restrict = 3

        self.edit_plot4 = self.edit_plots[3][0]
        self.edit_plot1_toolbar = self.edit_plots[0][1]
        self.edit_plot2_toolbar = self.edit_plots[1][1]
        self.edit_plot3_toolbar = self.edit_plots[2][1]
        self.edit_plot4_toolbar = self.edit_plots[3][1]

        self.result_page_grid_layout = None
        self.options_page_grid_layout = None
        self.plot_page_scale_cmb = None
        self.input_page_grid_layout = None
        self.browse_button = None
        self.next_btn = None
        self.result_page_scale_cmb = None
        self.options_page_scale_cmb = None
        self.filepath_txb = None
        self.is_scattering_vector_module_chb = None
        self.guinier_page_scale_cmb = None

        self.label_even_odd = None
        self.pushButton_reset = None
        self.spinBox_amount = None
        self._width = 800
        self._height = 900

    def setupUi(self, main_view):
        main_view.setObjectName("MainWindow")
        main_view.resize(self._width, self._height)

        main_view.setWizardStyle(QWizard.ClassicStyle)
        main_view.setOption(QWizard.NoBackButtonOnStartPage)

        self.build_plot_page(main_view)
        self.build_options_page(main_view)
        self.build_guinier_page(main_view)
        self.build_result_page(main_view)

        self.retranslateUi(main_view)

        QtCore.QMetaObject.connectSlotsByName(main_view)

        self.next_btn = main_view.button(QWizard.NextButton)

    def build_plot_tabs(self, plot, edit_plot, plot_toolbar, edit_plot_toolbar):
        # Initialize tab screen
        tabs = QTabWidget()
        tab1 = QWidget()
        tab2 = QWidget()
        # Add tabs
        tabs.addTab(tab1, "View mode")
        tabs.addTab(tab2, "Edit mode")
        # Create first tab
        tab1.layout = QVBoxLayout()
        tab1.layout.addWidget(plot_toolbar)
        tab1.layout.addWidget(plot)

        tab1.setLayout(tab1.layout)
        # Create second tab
        tab2.layout = QVBoxLayout()
        tab2.layout.addWidget(edit_plot_toolbar)
        tab2.layout.addWidget(edit_plot)
        tab2.setLayout(tab2.layout)
        # Add tabs to widget
        return tabs

    def build_plot_page(self, main_view):
        page = QWizardPage()
        self.input_page_grid_layout = QGridLayout()

        # path field
        self.filepath_txb = QLineEdit(page)
        self.filepath_txb.setObjectName("filePath")
        self.filepath_txb.setReadOnly(True)

        page.registerField("file-path*", self.filepath_txb)

        # degree, checkbox
        self.is_scattering_vector_module_chb = QCheckBox(ct.degree("nm", -1))
        self.is_scattering_vector_module_chb.setObjectName("isScatteringVectorModule")

        # Browse button
        self.browse_button = QPushButton("Browse")
        self.browse_button.setObjectName("btnBrowse")

        self.plot_page_scale_cmb = QComboBox()

        self.plot_page_scale_cmb.addItems(self._get_cmb_values())

        self.input_page_grid_layout.addWidget(self.plot_page_scale_cmb, 1, 1, 1, 3)

        page.registerField("scale-input", self.plot_page_scale_cmb)

        # insertion of widgets
        self.input_page_grid_layout.addWidget(self.filepath_txb, 0, 1, 1, 1)
        self.input_page_grid_layout.addWidget(self.is_scattering_vector_module_chb, 0, 2, 1, 1)
        self.input_page_grid_layout.addWidget(self.browse_button, 0, 3, 1, 1)

        self.input_page_grid_layout.addWidget(
            self.build_plot_tabs(self.plot1, self.edit_plot1, self.plot1_toolbar, self.edit_plot1_toolbar), 3, 1, 1, 3
        )

        page.setLayout(self.input_page_grid_layout)

        main_view.addPage(page)

    def build_options_page(self, main_view):
        page = QWizardPage()

        self.options_page_grid_layout = QGridLayout()

        self.options_page_scale_cmb = QComboBox()

        self.options_page_scale_cmb.addItems(self._get_cmb_values())

        self.options_page_grid_layout.addWidget(self.options_page_scale_cmb, 1, 1, 1, 3)
        self.options_page_grid_layout.addWidget(
            self.build_plot_tabs(self.plot2, self.edit_plot2, self.plot2_toolbar, self.edit_plot2_toolbar), 2, 1, 1, 3)

        page.registerField("scale-options", self.options_page_scale_cmb)

        page.setLayout(self.options_page_grid_layout)
        main_view.addPage(page)

    def build_guinier_page(self, main_view):
        page = QWizardPage()

        self.guinier_page_grid_layout = QGridLayout()

        self.guinier_page_scale_cmb = QComboBox()

        self.guinier_page_scale_cmb.addItems(self._get_cmb_values())

        self.guinier_page_grid_layout.addWidget(self.guinier_page_scale_cmb, 1, 1, 1, 3)

        self.guinier_page_grid_layout.addWidget(
            self.build_plot_tabs(self.plot3, self.edit_plot3, self.plot3_toolbar, self.edit_plot3_toolbar), 2, 1, 1, 3)

        page.registerField("guinier-scale-result", self.guinier_page_scale_cmb)

        page.setLayout(self.guinier_page_grid_layout)

        main_view.addPage(page)

    def build_result_page(self, main_view):
        page = QWizardPage()

        self.result_page_grid_layout = QGridLayout()

        self.result_page_scale_cmb = QComboBox()

        self.result_page_scale_cmb.addItems(self._get_cmb_values())

        self.result_page_grid_layout.addWidget(self.result_page_scale_cmb, 1, 1, 1, 3)

        self.result_page_grid_layout.addWidget(
            self.build_plot_tabs(self.plot4, self.edit_plot4, self.plot4_toolbar, self.edit_plot4_toolbar), 2, 1, 1, 3)

        page.registerField("scale-result", self.result_page_scale_cmb)

        page.setLayout(self.result_page_grid_layout)

        main_view.addPage(page)

    def retranslateUi(self, main_view):
        _translate = QtCore.QCoreApplication.translate

        main_view.setWindowTitle(_translate("SAXS Process Manager", "SAXS Process Manager"))
        main_view.setButtonText(QWizard.NextButton, _translate("Next >", "Next >"))
        main_view.setButtonText(QWizard.BackButton, _translate("< Back", "< Back"))
        main_view.setButtonText(QWizard.FinishButton, _translate("Finish", "Finish"))
